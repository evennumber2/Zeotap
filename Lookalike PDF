import pandas as pd

customers = pd.read_csv('Customers.csv')
products = pd.read_csv('Products.csv')
transactions = pd.read_csv('Transactions.csv')


merged_data = pd.merge(transactions, customers, on='CustomerID', how='left')
merged_data = pd.merge(merged_data, products, on='ProductID', how='left')


merged_data['DaysSinceSignup'] = (pd.to_datetime('today') - pd.to_datetime(merged_data['SignupDate'])).dt.days


customer_features = merged_data.groupby('CustomerID').agg({
    'TotalValue': ['sum', 'mean', 'count'],  # Total spend, average spend, purchase frequency
    'Quantity': ['sum', 'mean'],  # Total quantity, average quantity
    'Price': 'mean'  # Average price of items purchased
}).reset_index()

customer_features.columns = ['_'.join(col).strip() for col in customer_features.columns.values]


customers_encoded = pd.get_dummies(customers, columns=['Region'], prefix='Region')
customer_features = customer_features.merge(customers_encoded, on='CustomerID', how='left')

from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import StandardScaler


scaler = StandardScaler()
features = customer_features.drop(columns=['CustomerID']).values
scaled_features = scaler.fit_transform(features)


similarity_matrix = cosine_similarity(scaled_features)


similarity_df = pd.DataFrame(similarity_matrix, index=customer_features['CustomerID'], columns=customer_features['CustomerID'])

def get_top_lookalikes(customer_id, df, top_n=3):
    sim_scores = df.loc[customer_id].sort_values(ascending=False)
    return sim_scores.iloc[1:top_n+1]  # skip self

lookalikes = {}
for customer in customer_features['CustomerID'].head(20):  # First 20 customers
    lookalikes[customer] = [(sim_customer, score) for sim_customer, score in get_top_lookalikes(customer, similarity_df).items()]

# Create Lookalike.csv
lookalike_df = pd.DataFrame.from_dict(lookalikes, orient='index')
lookalike_df.columns = ['Lookalike1', 'Lookalike2', 'Lookalike3']
lookalike_df = lookalike_df.applymap(lambda x: f"{x[0]},{x[1]:.4f}")
lookalike_df.to_csv('Lookalike.csv')

